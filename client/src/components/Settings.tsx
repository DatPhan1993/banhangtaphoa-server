import React, { useState } from 'react';

interface SettingsProps {
  onNavigate?: (page: string) => void;
}

const Settings: React.FC<SettingsProps> = ({ onNavigate }) => {
  const [selectedSetting, setSelectedSetting] = useState<string | null>(null);

  const settingsItems = [
    {
      id: 'store-setup',
      title: 'Thi·∫øt l·∫≠p c·ª≠a h√†ng',
      description: 'C·∫•u h√¨nh th√¥ng tin c·ª≠a h√†ng, ƒë·ªãa ch·ªâ, logo v√† th√¥ng tin li√™n h·ªá',
      icon: 'üè™',
      color: 'from-blue-500 to-blue-600',
      hoverColor: 'hover:from-blue-600 hover:to-blue-700'
    },
    {
      id: 'print-templates',
      title: 'Qu·∫£n l√Ω m·∫´u in',
      description: 'Thi·∫øt l·∫≠p v√† qu·∫£n l√Ω c√°c m·∫´u in h√≥a ƒë∆°n, phi·∫øu thu chi',
      icon: 'üñ®Ô∏è',
      color: 'from-green-500 to-green-600',
      hoverColor: 'hover:from-green-600 hover:to-green-700'
    },
    {
      id: 'user-management',
      title: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng',
      description: 'Qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng, ph√¢n quy·ªÅn v√† b·∫£o m·∫≠t',
      icon: 'üë•',
      color: 'from-purple-500 to-purple-600',
      hoverColor: 'hover:from-purple-600 hover:to-purple-700'
    },
    {
      id: 'branch-management',
      title: 'Qu·∫£n l√Ω chi nh√°nh',
      description: 'Thi·∫øt l·∫≠p v√† qu·∫£n l√Ω th√¥ng tin c√°c chi nh√°nh c·ª≠a h√†ng',
      icon: 'üè¢',
      color: 'from-orange-500 to-orange-600',
      hoverColor: 'hover:from-orange-600 hover:to-orange-700'
    },
    {
      id: 'qr-payment',
      title: 'Qu·∫£n l√Ω thanh to√°n QR',
      description: 'C·∫•u h√¨nh v√† qu·∫£n l√Ω c√°c ph∆∞∆°ng th·ª©c thanh to√°n QR code',
      icon: 'üì±',
      color: 'from-teal-500 to-teal-600',
      hoverColor: 'hover:from-teal-600 hover:to-teal-700'
    },
    {
      id: 'transaction-history',
      title: 'L·ªãch s·ª≠ giao d·ªãch',
      description: 'Xem v√† qu·∫£n l√Ω l·ªãch s·ª≠ c√°c giao d·ªãch ƒë√£ th·ª±c hi·ªán',
      icon: 'üìã',
      color: 'from-indigo-500 to-indigo-600',
      hoverColor: 'hover:from-indigo-600 hover:to-indigo-700'
    }
  ];

  const handleSettingClick = (settingId: string) => {
    setSelectedSetting(settingId);
    if (onNavigate) {
      if (settingId === 'store-setup') {
        onNavigate('store-setup');
      } else if (settingId === 'print-templates') {
        onNavigate('print-templates');
      } else if (settingId === 'qr-payment') {
        onNavigate('qr-payment');
      }
      // TODO: Handle other settings navigation
    }
    console.log(`Navigating to ${settingId}`);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <div className="w-10 h-10 bg-gradient-to-r from-gray-600 to-gray-700 rounded-xl flex items-center justify-center">
              <span className="text-xl">‚öôÔ∏è</span>
            </div>
            <h1 className="text-3xl font-bold text-gray-900">C√†i ƒë·∫∑t h·ªá th·ªëng</h1>
          </div>
          <p className="text-gray-600 text-lg">
            Qu·∫£n l√Ω v√† c·∫•u h√¨nh c√°c thi·∫øt l·∫≠p cho h·ªá th·ªëng POS c·ªßa b·∫°n
          </p>
        </div>

        {/* Settings List - Horizontal Layout */}
        <div className="space-y-4">
          {settingsItems.map((item) => (
            <div
              key={item.id}
              onClick={() => handleSettingClick(item.id)}
              className={`
                bg-white rounded-xl shadow-sm border border-gray-200 p-6 cursor-pointer
                transition-all duration-300 hover:shadow-md hover:border-gray-300
                ${selectedSetting === item.id ? 'ring-2 ring-blue-500 shadow-md' : ''}
              `}
            >
              <div className="flex items-center justify-between">
                {/* Left side - Icon, Title and Description */}
                <div className="flex items-center gap-4 flex-1">
                  <div className={`
                    w-16 h-16 bg-gradient-to-r ${item.color} rounded-xl 
                    flex items-center justify-center text-2xl shadow-md
                    transition-all duration-300 ${item.hoverColor}
                  `}>
                    {item.icon}
                  </div>
                  <div className="flex-1">
                    <h3 className="text-xl font-semibold text-gray-900 mb-1">
                      {item.title}
                    </h3>
                    <p className="text-gray-600 text-sm leading-relaxed">
                      {item.description}
                    </p>
                  </div>
                </div>

                {/* Right side - Action Button and Arrow */}
                <div className="flex items-center gap-4">
                  <button className={`
                    px-6 py-3 bg-gradient-to-r ${item.color} text-white rounded-lg
                    text-sm font-medium transition-all duration-300 ${item.hoverColor}
                    hover:shadow-md
                  `}>
                    C·∫•u h√¨nh
                  </button>
                  <div className="text-gray-400 text-xl">
                    ‚Üí
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Quick Actions */}
        <div className="mt-12 bg-white rounded-2xl shadow-sm border border-gray-200 p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2">
            <span>‚ö°</span>
            Thao t√°c nhanh
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <button className="p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors text-left">
              <div className="text-2xl mb-2">üîÑ</div>
              <div className="font-medium text-gray-900">Sao l∆∞u d·ªØ li·ªáu</div>
              <div className="text-sm text-gray-600">T·∫°o b·∫£n sao l∆∞u</div>
            </button>
            <button className="p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors text-left">
              <div className="text-2xl mb-2">üìä</div>
              <div className="font-medium text-gray-900">Xu·∫•t b√°o c√°o</div>
              <div className="text-sm text-gray-600">T·∫°o b√°o c√°o t·ªïng h·ª£p</div>
            </button>
            <button className="p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors text-left">
              <div className="text-2xl mb-2">üîß</div>
              <div className="font-medium text-gray-900">B·∫£o tr√¨ h·ªá th·ªëng</div>
              <div className="text-sm text-gray-600">Ki·ªÉm tra v√† t·ªëi ∆∞u</div>
            </button>
            <button className="p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-colors text-left">
              <div className="text-2xl mb-2">‚ùì</div>
              <div className="font-medium text-gray-900">Tr·ª£ gi√∫p</div>
              <div className="text-sm text-gray-600">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</div>
            </button>
          </div>
        </div>

        {/* System Info */}
        <div className="mt-8 bg-gradient-to-r from-gray-800 to-gray-900 rounded-2xl p-6 text-white">
          <h3 className="text-lg font-semibold mb-4">Th√¥ng tin h·ªá th·ªëng</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <div className="text-gray-300">Phi√™n b·∫£n</div>
              <div className="font-medium">POS System v1.0.0</div>
            </div>
            <div>
              <div className="text-gray-300">C·∫≠p nh·∫≠t cu·ªëi</div>
              <div className="font-medium">{new Date().toLocaleDateString('vi-VN')}</div>
            </div>
            <div>
              <div className="text-gray-300">Tr·∫°ng th√°i</div>
              <div className="font-medium flex items-center gap-2">
                <span className="w-2 h-2 bg-green-400 rounded-full"></span>
                Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Settings; 